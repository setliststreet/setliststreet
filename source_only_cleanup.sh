#!/bin/bash
echo "=============================================="
echo "SOURCE CODE ONLY REPOSITORY SETUP"
echo "=============================================="

cd "/Users/brianbonk/Downloads/Setlist Street GitHub"

echo "Step 1: Creating backup..."
cp -r . "../Setlist Street GitHub SOURCE BACKUP" 2>/dev/null || echo "Backup attempted"

echo "Step 2: Removing git history..."
rm -rf .git

echo "Step 3: Removing ALL generated/compilable files..."
# Remove node_modules everywhere
find . -name "node_modules" -type d -exec rm -rf {} + 2>/dev/null || true
find . -name ".next" -type d -exec rm -rf {} + 2>/dev/null || true
find . -name ".turbo" -type d -exec rm -rf {} + 2>/dev/null || true
find . -name "dist" -type d -exec rm -rf {} + 2>/dev/null || true
find . -name "build" -type d -exec rm -rf {} + 2>/dev/null || true
find . -name "out" -type d -exec rm -rf {} + 2>/dev/null || true

# Remove logs and cache
find . -name "*.log" -delete 2>/dev/null || true
find . -name ".DS_Store" -delete 2>/dev/null || true
find . -name "*.cache" -delete 2>/dev/null || true

# Remove package-lock.json (can be regenerated)
find . -name "package-lock.json" -delete 2>/dev/null || true

# Remove large data files
find . -name "*.csv" -delete 2>/dev/null || true

# Remove environment files
find . -name ".env*" -delete 2>/dev/null || true

echo "Step 4: Creating comprehensive source-only .gitignore..."
cat > .gitignore << 'GITIGNORE_EOF'
# ==========================================
# GENERATED/COMPILABLE FILES - DO NOT COMMIT
# ==========================================

# Dependencies (regenerated with npm install)
node_modules/
.pnp/
.pnp.js
package-lock.json
yarn.lock
.yarn/

# Build outputs (regenerated with npm run build)
.next/
out/
dist/
build/
.turbo/

# Cache directories
.cache/
.parcel-cache/
.npm/
.eslintcache/
.stylelintcache/

# Environment variables (local/sensitive)
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.env.*.local

# Runtime generated files
next-env.d.ts
*.tsbuildinfo

# Logs (generated at runtime)
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*
lerna-debug.log*

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Coverage reports (generated by tests)
coverage/
*.lcov
.nyc_output/

# Dependency directories for other platforms
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.parcel-cache

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# ==========================================
# PLATFORM/OS SPECIFIC
# ==========================================

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon?
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.stackdump
[Dd]esktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~

# ==========================================
# IDE/EDITOR FILES
# ==========================================

# VS Code
.vscode/settings.json
.vscode/tasks.json
.vscode/launch.json
.vscode/extensions.json
.vscode/*.code-snippets

# JetBrains IDEs
.idea/
*.swp
*.swo

# Sublime Text
*.tmlanguage.cache
*.tmPreferences.cache
*.stTheme.cache
*.sublime-workspace
*.sublime-project

# Vim
[._]*.s[a-v][a-z]
[._]*.sw[a-p]
[._]s[a-rt-v][a-z]
[._]ss[a-gi-z]
[._]sw[a-p]

# ==========================================
# DATA FILES (use external storage/DB)
# ==========================================

# Large data files
*.csv
*.xlsx
*.xls
data/
uploads/
tmp/
temp/

# ==========================================
# DEPLOYMENT/CLOUD SPECIFIC
# ==========================================

# Vercel
.vercel

# Netlify
.netlify/

# AWS
.aws/

# ==========================================
# TESTING
# ==========================================

# Jest
coverage/

# Cypress
cypress/videos/
cypress/screenshots/

# ==========================================
# WHAT WE DO COMMIT (source code only):
# ==========================================
# ✅ .js, .jsx, .ts, .tsx files (source code)
# ✅ package.json (dependency declarations)
# ✅ tsconfig.json, next.config.js (configuration)
# ✅ .gitignore, README.md (project files)
# ✅ /visualelements/ folder (design assets)
# ✅ /public/ folder (static assets)
# ✅ /components/, /pages/, /utils/, /lib/ (source directories)
# ✅ /styles/ folder (stylesheets)
GITIGNORE_EOF

echo "Step 5: Initializing git repository..."
git init

echo "Step 6: Adding ONLY source code and assets..."
git add .

echo "Step 7: Checking what will be committed..."
echo "Files to be committed:"
git ls-files | head -20
echo "..."
echo "Total files: $(git ls-files | wc -l)"

echo "Step 8: Creating commit..."
git commit -m "Initial commit: Source code and assets only

- Source code (.js, .jsx, .ts, .tsx files)
- Configuration files (package.json, tsconfig.json, etc.)
- Visual elements and design assets
- Documentation files
- Static assets in public folder

Excluded all generated/compilable content:
- node_modules (run npm install to regenerate)
- Build outputs (run npm run build to regenerate)
- Cache files and logs
- Environment files
- Large data files

Repository optimized for GitHub with minimal size."

echo "Step 9: Setting up remote..."
git remote add origin https://github.com/setliststreet/setliststreet.git
git branch -M main

echo "Step 10: Pushing to GitHub..."
git push -u origin main --force

echo ""
echo "[SUCCESS] Source-code-only repository created!"
echo "[WEB] Visit: https://github.com/setliststreet/setliststreet"
echo ""
echo "Final repository size:"
du -sh .git
echo ""
echo "To get started developing:"
echo "1. cd deadco-setlist-game"
echo "2. npm install"
echo "3. npm run dev"
